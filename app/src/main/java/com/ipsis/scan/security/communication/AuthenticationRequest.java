package com.ipsis.scan.security.communication;

import android.util.Log;
import com.ipsis.scan.communication.sending.NetworkManager;
import com.ipsis.scan.communication.sending.RequestResponse;
import com.ipsis.scan.reporting.data.CacheManager;
import com.ipsis.scan.utils.SecurityUtils;
import org.json.JSONException;
import org.json.JSONObject;

import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.concurrent.TimeoutException;

/**
 * Handle authentication
 */
public class AuthenticationRequest {

    /**
     * Username
     */
    private String mUsername;

    /**
     * Password
     */
    private String mPassword;

    /**
     * Phone's imei
     */
    private String mImei;

    /**
     * Phone's mac address
     */
    private String mMac;

    /**
     * Firebase token
     */
    private String mFirebaseToken;

    /**
     * Nonce generated by the client
     */
    private String mClientNonce;

    /**
     * Nonce received from the server
     */
    private String mServerNonce;

    private AsyncLoginTask mAsyncLoginTask;

    /**
     * Initialize the authentication request
     * @param username username
     * @param password password
     * @param imei phone's imei
     * @param firebaseToken firebase token
     */
    public AuthenticationRequest(String username, String password, String imei, String firebaseToken) {
        super();

        mUsername = username;
        mPassword = password;
        mImei = imei;
        mMac = "0";
        mFirebaseToken = firebaseToken;
    }

    /**
     * Get the server nonce
     * @param connectionCallback Request connectionCallback
     */
    private void nonce(final ConnectionCallback connectionCallback) {
        mClientNonce = SecurityUtils.nonce();

        HashMap<String, Object> body = new HashMap<>();
        body.put("nonce", mClientNonce);

        NetworkManager.getInstance().post("/authentification/nonce", body).asJson(new RequestResponse.JsonCallback() {
            @Override
            public void onResponse(JSONObject json) {
                try {
                    if (json.getString("status").equals("success")) {
                        mServerNonce = json.getJSONObject("data").getString("nonce");

                        connectionCallback.onConnectionSucceed();
                    } else {
                        connectionCallback.onConnectionFailure(new Exception("Request error (nonce)"));
                    }
                } catch (JSONException e) {
                    connectionCallback.onConnectionFailure(e);
                }
            }

            @Override
            public void onFailure(Exception e) {
                connectionCallback.onConnectionFailure(new TimeoutException());
            }
        });
    }

    /**
     * Get the api token
     *
     * NOTE: NetworkManager.mApiToken is set
     *
     * @param connectionCallback Request connectionCallback
     */
    public void login(final ConnectionCallback connectionCallback) {
        nonce(new ConnectionCallback() {
            @Override
            public void onConnectionSucceed() {
                try {
                    String hash = SecurityUtils.sha256(mServerNonce + mClientNonce + SecurityUtils.sha256(mPassword));

                    HashMap<String, Object> body = new HashMap<>();
                    body.put("username", mUsername);
                    body.put("nonce", mServerNonce);
                    body.put("hash", hash);
                    body.put("imei", mImei);
                    body.put("mac", mMac);
                    body.put("token", mFirebaseToken);
                    body.put("gcm_token", mFirebaseToken);

                    NetworkManager.getInstance().post("/authentification/login", body).asJson(new RequestResponse.JsonCallback() {
                        @Override
                        public void onResponse(JSONObject json) {
                            Log.e("login", json.toString());
                            try {
                                // {"status":"error","data":{},"code":102,"reason":"device_not_found","message":"Device not found"}
                                // {"status":"error","data":{},"code":101,"reason":"user_not_found","message":"User not found"}
                                if (json.getString("status").equals("success")) {
                                    String apiToken = json.getJSONObject("data").getString("api_token");
                                    int passwordChanged = json.getJSONObject("data").getInt("password_changed");

                                    CacheManager.getInstance().setOfflineMode(false);

                                    NetworkManager.getInstance().getNetworkConfiguration().setUsername(mUsername);
                                    NetworkManager.getInstance().getNetworkConfiguration().setApiToken(apiToken);

                                    if (passwordChanged == 0) {
                                        connectionCallback.onChangePassword();
                                    } else {
                                        connectionCallback.onConnectionSucceed();
                                    }
                                } else {
                                    connectionCallback.onConnectionFailure(new AuthenticationException(json.getInt("code")));
                                }
                            } catch (JSONException e) {
                                connectionCallback.onConnectionFailure(e);
                            }
                        }

                        @Override
                        public void onFailure(Exception e) {
                            connectionCallback.onConnectionFailure(new TimeoutException());
                        }
                    });
                } catch (NoSuchAlgorithmException e) {
                    connectionCallback.onConnectionFailure(e);
                }
            }

            @Override
            public void onChangePassword() {

            }

            @Override
            public void onConnectionFailure(Exception e) {
                connectionCallback.onConnectionFailure(e);
            }
        });
    }

    public void password(final String password, final PasswordChangedCallback callback) {
        mPassword = password;

        try {
            HashMap<String, Object> body = new HashMap<>();
            body.put("password", SecurityUtils.sha256(mPassword));

            NetworkManager.getInstance().post("/authentification/password", body).asJson(new RequestResponse.JsonCallback() {
                @Override
                public void onResponse(JSONObject json) {
                    try {
                        if (json.getString("status").equals("success")) {
                            callback.onPasswordChanged();
                        } else {
                            callback.onFailure(new AuthenticationException(json.getInt("code")));
                        }
                    } catch (JSONException e) {
                        callback.onFailure(e);
                    }
                }

                @Override
                public void onFailure(Exception e) {
                    callback.onFailure(e);
                }
            });
        } catch (NoSuchAlgorithmException e) {
            callback.onFailure(e);
        }
    }

    public void retryLogin() {
        if (mAsyncLoginTask != null) {
            mAsyncLoginTask.stopTask();
        }

        mAsyncLoginTask = new AsyncLoginTask();
        mAsyncLoginTask.start();
    }

    /**
     * Request callback
     */
    public interface ConnectionCallback {
        /**
         * Called when the authentication succeed
         */
        void onConnectionSucceed();

        void onChangePassword();

        /**
         * Called when an error happens
         * @param e execption
         */
        void onConnectionFailure(Exception e);
    }

    public interface PasswordChangedCallback {
        void onPasswordChanged();

        void onFailure(Exception e);
    }

    public class AsyncLoginTask extends Thread {
        private boolean mStopped;

        public AsyncLoginTask() {
            super();

            mStopped = false;
        }

        public void stopTask() {
            mStopped = true;
        }

        public void run() {
            while (!mStopped) {
                login(new ConnectionCallback() {
                    @Override
                    public void onConnectionSucceed() {
                        CacheManager.getInstance().setOfflineMode(false);

                        stopTask();
                    }

                    @Override
                    public void onChangePassword() {
                        onConnectionSucceed();
                    }

                    @Override
                    public void onConnectionFailure(Exception e) {
                        synchronized (AsyncLoginTask.this) {
                            AsyncLoginTask.this.notify();
                        }
                    }
                });

                try {
                    synchronized (this) {
                        wait();
                    }

                    sleep(60000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }
}
